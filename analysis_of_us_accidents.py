# -*- coding: utf-8 -*-
"""Analysis_of_US_Accidents.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a2r1FU9__gJbtDxdxFIcVUaZqXM_R8uR
"""

import pandas as pd

data_filepath = "/content/drive/MyDrive/Kaggle/US_Accidents/US_Accidents_Dec20_Updated.csv"

df = pd.read_csv(data_filepath)
df.head(10)

# Checking the columns in the data
df.columns

print("Number of columns: ",len(df.columns))
print("Number of rows: ",len(df))

"""Gathering information about the dataset
* Missing values
* Null values
* Type of data in the file
"""

df.info()

df.describe()

"""How many columns are numerical data?

"""

len(df.select_dtypes(['int64', 'float64']).columns)

"""Missing or incorrect values?"""

df.isnull().sum()

df.isna().sum()

"""Finding the percantage of missing data per columns?"""

df.isna().sum().sort_values(ascending=False) * 100. / len(df)

"""Plotting the missing percentages"""

# Plotting a Pandas.Series data
missing_data = df.isna().sum().sort_values(ascending=False) * 100. / len(df)

type(missing_data) # we can directly plot the Pandas.Series using plot()

missing_data.plot(kind='bar')

missing_data[missing_data!=0].plot(kind='barh')

# Printing all the columns
df.columns

df.City.unique()

cities = df.City.unique()
len(cities)

"""Getting the number of accidents in each city over all years (2016-2020)"""

cities_by_accident = df.City.value_counts()
cities_by_accident[:20]

'New York' in cities

cities_by_accident["New York"]

cities_by_accident[:20].plot(kind='barh')

import seaborn as sns
sns.set_style("darkgrid")

"""Plotting all the citis by number of accidents accidents"""

sns.distplot(cities_by_accident)

high_accident_cities = cities_by_accident[cities_by_accident >=1000] # having over 1000 accidents
low_accident_cities = cities_by_accident[cities_by_accident < 1000]  # having less than 1000 accidents

# Percentage of high accident cities
len(high_accident_cities) / len(cities_by_accident)

# Distribution of high accident cities
sns.distplot(high_accident_cities)

# Distribution of low accident cities
sns.distplot(low_accident_cities)

# Distribution of low accident cities
sns.histplot(low_accident_cities, log_scale=True)

# Distribution of high accident cities
sns.histplot(high_accident_cities, log_scale=True)

"""There are alos cities which have reported just 1 accident in 4 years.

This could be an indication of some missing data/ irregularities or the impact of population, per-capitaincome, government spending, average age of city, etc. as hypothesised earlier
"""

cities_by_accident[cities_by_accident == 1]

#checking out an entry
df.Start_Time[0]

# converting date time to correct format
df.Start_Time = pd.to_datetime(df.Start_Time)

df.Start_Time[0]

# Segregating the different aspects of date-time
df.Start_Time[0].day, df.Start_Time[0].month, df.Start_Time[0].year, df.Start_Time[0].hour, df.Start_Time[0].minute, df.Start_Time[0].second

"""Get the hour of the day for all the data"""

df.Start_Time.dt.hour

"""Plotting the density distribution and count distribution of accidents at each hour of the day"""

sns.histplot(df.Start_Time.dt.hour, bins=24)

sns.histplot(df.Start_Time.dt.hour, bins=24, stat='density')

sns.histplot(df.Start_Time.dt.dayofweek, bins=7, stat='density')

sundays_start_time = df.Start_Time[df.Start_Time.dt.dayofweek == 6]

sns.histplot(sundays_start_time.dt.hour, bins=24, stat='density')

saturdays_start_time = df.Start_Time[df.Start_Time.dt.dayofweek == 5]
sns.histplot(saturdays_start_time.dt.hour, bins=24, stat='density')

mondays_start_time = df.Start_Time[df.Start_Time.dt.dayofweek == 0]
sns.histplot(mondays_start_time.dt.hour, bins=24, stat='density')

wednesdays_start_time = df.Start_Time[df.Start_Time.dt.dayofweek == 2]
sns.histplot(wednesdays_start_time.dt.hour, bins=24, stat='density')

sns.histplot(df.Start_Time.dt.month, bins=12, stat='density')

df_particular_year = df[df.Start_Time.dt.year == 2016]
sns.histplot(df_particular_year.Start_Time.dt.month, bins=12, stat='density')

df_particular_year = df[df.Start_Time.dt.year == 2017]
sns.histplot(df_particular_year.Start_Time.dt.month, bins=12, stat='density')

df_particular_year = df[df.Start_Time.dt.year == 2018]
sns.histplot(df_particular_year.Start_Time.dt.month, bins=12, stat='density')

df_particular_year = df[df.Start_Time.dt.year == 2019]
sns.histplot(df_particular_year.Start_Time.dt.month, bins=12, stat='density')

df_particular_year = df[df.Start_Time.dt.year == 2020]
sns.histplot(df_particular_year.Start_Time.dt.month, bins=12, stat='density')

df.Start_Lat

df.Start_Lng

import matplotlib.pyplot as plt

"""Plotting the latitudes and longitudes"""

plt.figure(figsize=(15,10))
sns.scatterplot(y=df.Start_Lat, x=df.Start_Lng)

df.info()

plt.figure(figsize=(20,15))
sns.scatterplot(y=df.Start_Lat, x=df.Start_Lng, hue=df.State)

plt.figure(figsize=(20,15))
sns.scatterplot(y=df.Start_Lat, x=df.Start_Lng, hue=df.Severity)

df.State.value_counts()[:25]

pie, ax = plt.subplots(figsize=[15,15])
labels = df.State.value_counts().keys()
plt.pie(x=df.State.value_counts(), autopct="%.1f%%", explode=[0.1]*len(df.State.value_counts()), labels=labels, pctdistance=0.5)
plt.show();

# Segregating accidents on the basis of severity
severe_accidents_4 = df[df.Severity==4].State.value_counts()
severe_accidents_3 = df[df.Severity==3].State.value_counts()
severe_accidents_2 = df[df.Severity==2].State.value_counts()
severe_accidents_1 = df[df.Severity==1].State.value_counts()

fig, ax1 = plt.subplots(figsize=[25,25])
ax1 = plt.subplot2grid((2,2),(0,0))
labels = severe_accidents_1.keys()
plt.pie(x=severe_accidents_1, autopct="%.1f%%", explode=[0.1]*len(severe_accidents_1), labels=labels, pctdistance=0.5)
plt.title("least Severe Accidents: Severity=1", fontsize=20)

ax1 = plt.subplot2grid((2,2),(0,1))
labels = severe_accidents_2.keys()
plt.pie(x=severe_accidents_2, autopct="%.1f%%", explode=[0.1]*len(severe_accidents_2), labels=labels, pctdistance=0.5)
plt.title("less Severe Accidents: Severity=2", fontsize=20)

ax1 = plt.subplot2grid((2,2),(1,0))
labels = severe_accidents_3.keys()
plt.pie(x=severe_accidents_3, autopct="%.1f%%", explode=[0.1]*len(severe_accidents_3), labels=labels, pctdistance=0.5)
plt.title("Severe Accidents: Severity=3", fontsize=20)

ax1 = plt.subplot2grid((2,2),(1,1))
labels = severe_accidents_4.keys()
plt.pie(x=severe_accidents_4, autopct="%.1f%%", explode=[0.1]*len(severe_accidents_4), labels=labels, pctdistance=0.5)
plt.title("Most Severe Accidents: Severity=4", fontsize=20)

"""**Inferences from the above plot**
- California generally seems to have the most accidents (in all categories)
"""

list(zip(list(df.Start_Lat), list(df.Start_Lng)))

import random

df_sample = df.sample(10000)

df_sample.Start_Lat

df.columns

df['Visibility(mi)']

df['Visibility(mi)'].value_counts()

df[(df.Severity == 4) & (df['Visibility(mi)'] <=10)]  # data when severity is high and visibility is moderate

(len(df[df['Visibility(mi)'] <=2]) / len(df) )* 100. # total percentage of accidents in which visibility was less than 2 miles

(len(df[(df['Visibility(mi)'] <=2) & (df['Severity'] ==4)]) / len(df) ) * 100. # total percentage of accidents in which visibility was less than 2 miles and severity was very high

weather = df.Weather_Condition.value_counts()

weather[weather > 1000]  # Kind of weather when no. of accidents were greater than 1000

import matplotlib.pyplot as plt

pie, ax = plt.subplots(figsize=[15,15])
labels = weather[weather > 1000].keys()
plt.pie(x=weather[weather > 1000], autopct="%.1f%%", explode=[0.1]*len(weather[weather > 1000]), labels=labels, pctdistance=0.5)
plt.show();

df['Temperature(F)']

df['Temperature(F)'].value_counts()

temperature = df['Temperature(F)'].value_counts()

temperature.index

temperature.values

import seaborn as sns

plt.figure(figsize=(10,5))
sns.scatterplot(x=temperature.index, y=temperature.values)
plt.show();

df.Sunrise_Sunset.value_counts()

pie, ax = plt.subplots(figsize=[6,6])
labels = df.Sunrise_Sunset.value_counts().keys()
plt.pie(x=df.Sunrise_Sunset.value_counts(), autopct="%.1f%%", explode=[0.01]*len(df.Sunrise_Sunset.value_counts()), labels=labels, pctdistance=0.5)
plt.title("Day/Night Distribution of accidents")
plt.show();

df.columns

amenity = df.Amenity.groupby(df.Severity).value_counts()
amenity

amenity.index

no_exit = df.No_Exit.groupby(df.Severity).value_counts()
no_exit

railway = df.Railway.groupby(df.Severity).value_counts()
railway

traffic_calming = df.Traffic_Calming.groupby(df.Severity).value_counts()
traffic_calming

stop = df.Stop.groupby(df.Severity).value_counts()
stop

traffic_signal = df.Traffic_Signal.groupby(df.Severity).value_counts()
traffic_signal

give_way = df.Give_Way.groupby(df.Severity).value_counts()
give_way

bump = df.Bump.groupby(df.Severity).value_counts()
bump

crossing = df.Crossing.groupby(df.Severity).value_counts()
crossing

df.Turning_Loop.value_counts()

"""Plotting all the values"""

fig, ax = plt.subplots(3,3, figsize=(20, 20))

crossing.unstack().plot(kind='bar', ax=ax[0,0], title="Crossing")
bump.unstack().plot(kind='bar', ax=ax[0,1], title="Bump")
amenity.unstack().plot(kind='bar', ax=ax[0,2], title="Amenity")
give_way.unstack().plot(kind='bar', ax=ax[1,0], title="Give Way")
traffic_signal.unstack().plot(kind='bar', ax=ax[1,1], title="Traffic Signal")
stop.unstack().plot(kind='bar', ax=ax[1,2], title="Stop")
no_exit.unstack().plot(kind='bar', ax=ax[2,0], title="No Exit")
traffic_calming.unstack().plot(kind='bar', ax=ax[2,1], title="Traffic Calming")
railway.unstack().plot(kind='bar', ax=ax[2,2], title="Railway")

null_cols = [i for i in data.columns if data[i].isnull().any()]
print(null_cols)

mn.matrix(data[null_cols]);

new_data_a = data.drop(columns=["End_Lng", "End_Lat", "Number"], axis=0)

new_data_b = new_data_a.dropna(subset = ['Visibility(mi)','Weather_Condition','Humidity(%)','Temperature(F)','Wind_Direction','Pressure(in)','Weather_Timestamp','Airport_Code','Timezone','Zipcode','Sunrise_Sunset','Civil_Twilight','Nautical_Twilight','Astronomical_Twilight','City','Description'])

new_data_b.isnull().sum()

final_data = new_data_b.drop(columns = 'ID', axis=0)

final_data.isnull().sum()

state_counts = final_data["State"].value_counts()
fig = go.Figure(data=go.Choropleth(locations=state_counts.index, z=state_counts.values.astype(float), locationmode="USA-states", colorscale="turbo"))
fig.update_layout(title_text="Number of Accidents for each State", geo_scope="usa")
fig.show()

print("State Code: ", final_data.State.unique())
print("Total No. of State in Dataset: ", len(final_data.State.unique()))

fig, ax = plt.subplots(figsize = (20,5))
c = sns.countplot(x="State", data=final_data, orient = 'v', palette = "crest_r", order = final_data['State'].value_counts().index)
c.set_title("States with No. of Accidents");

fig, ax = plt.subplots(figsize = (20,5))
c = sns.countplot(x="City", data=final_data, order=final_data.City.value_counts().iloc[:50].index, orient = 'v', palette = "crest_r")
c.set_title("Top 50 Cities with Highest No. of Accidents")
c.set_xticklabels(c.get_xticklabels(), rotation=90)
plt.show()

final_data.Start_Time = pd.to_datetime(final_data.Start_Time)
final_data.Start_Time[0]

final_data['Month'] = final_data['Start_Time'].dt.month
final_data['Year'] = final_data['Start_Time'].dt.year
final_data['Hour'] = final_data['Start_Time'].dt.hour
final_data['Weekday'] = final_data['Start_Time'].dt.weekday
#yearly data subset
data_2016 = final_data[final_data.Start_Time.dt.year == 2016]
data_2017 = final_data[final_data.Start_Time.dt.year == 2017]
data_2018 = final_data[final_data.Start_Time.dt.year == 2018]
data_2019 = final_data[final_data.Start_Time.dt.year == 2019]
data_2020 = final_data[final_data.Start_Time.dt.year == 2020]
data_2017_2019 = final_data[(final_data["Year"] >= 2017) & (final_data["Year"] <= 2019)]

fig, ax = plt.subplots(figsize = (10,5))
c = sns.countplot(x="Year", data=final_data, orient = 'v', palette = "crest")
plt.annotate('Data Not Available',xy=(-0.4,500000), fontsize=11)
c.set_title("No. of Accidents in Year")
for i in ax.patches:
    count = '{:,.0f}'.format(i.get_height())
    x = i.get_x()+i.get_width()-0.60
    y = i.get_height()+10000
    ax.annotate(count, (x, y))
plt.show()

fig, ax = plt.subplots(figsize = (10,5))
c = sns.countplot(x="Month", data=data_2016, orient = 'v', palette = "crest")
plt.annotate('Data Not Available',xy=(2,50000), fontsize=11)
c.set_title("No. of Accidents in Months of Year 2016")
plt.show()

fig, ax = plt.subplots(figsize = (10,5))
c = sns.countplot(x="Month", data=data_2016, orient = 'v', palette = "crest")
plt.annotate('Data Not Available',xy=(2,50000), fontsize=11)
c.set_title("No. of Accidents in Months of Year 2016")
plt.show()

fig, ax = plt.subplots(figsize = (10,5))
c = sns.countplot(x="Month", data=data_2020, orient = 'v', palette = "crest")
plt.annotate('Covid-19 Pandemic',xy=(2,150000), fontsize=12)
plt.annotate("[",xy=(0,0),xytext=(1.9,150000),arrowprops={'arrowstyle':'-|>'}, fontsize=12)
plt.annotate("]",xy=(10,0),xytext=(4.5,150000),arrowprops={'arrowstyle':'-|>'}, fontsize=12)
c.set_title("No. of Accidents in Month of Year 2020")
plt.show()